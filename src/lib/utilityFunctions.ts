// üïÆ <cyberbiont> c5745bee-a5b1-4b45-966e-839fec3db57a.md
// üïÆ <cyberbiont> 4959862d-ffdd-4a7b-96a6-25811f2e54a9.md
export function addNestedProperty<
	B extends Record<string, any>,
	P extends string & RecursiveKeyOf<B>,
	V extends DeepType<B, P>
>(
	base: B,
	path: P,
	value: V,
	o: { overwrite: boolean } = { overwrite: true },
): B {
	// üïÆ <cyberbiont> 4a70100b-0779-488f-9667-b169b5fcb41e.md
	const properties = path.split('.') as Array<string & keyof B>;
	const lastProperty = properties.pop();
	if (!lastProperty)
		throw new Error('path argument must contain at least one property');

	function isObject(arg: unknown): arg is object {
		return typeof arg === 'object' && arg !== null;
	}

	const lastObj = properties.reduce((acc, property) => {
		// –µ—Å–ª–∏ –ø—Ä–∏–≤–æ–¥–∏–º property –∫ —Ç–∏–ø—É keyOf B, —Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏–º B,
		// –Ω–æ –Ω–µ–ª—å–∑—è –ø—Ä–∏—Å–≤–æ–∏—Ç—å –ø–æ—Ç–æ–º {} (—Ç.–∫. B[keyof B] —ç—Ç–æ —Ö–∑ —á—Ç–æ) –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏–¥–µ—Ç—Å—è –∫ any –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
		// –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞, —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
		if (!(property in acc)) acc[property] = {} as any;
		// –µ—Å–ª–∏ —Ç–∞–∫–æ–µ —Å–≤-–≤–æ –µ—Å—Ç—å, –∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –≤—Å–µ –û–ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
		// –µ—Å–ª–∏ —Å–≤-–≤–æ –µ—Å—Ç—å –∏ —ç—Ç–æ –Ω–µ –æ–±—ä–µ–∫—Ç, —Ç–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å–≤-–≤
		// –ø–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ç—É—Ç –Ω–∞–¥–æ –µ—â–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–∫–ª—é—á–∏—Ç—å, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å lodash.isObject
		else if (!isObject(acc) && !o.overwrite)
			throw new Error('you are trying to overwrite existing property');
		return acc[property];
	}, base);

	lastObj[lastProperty] = value;
	return base;
}

// TEST
type Foo = {
	a?: {
		very: {
			deep: {
				property: number;
			};
		};
	};
	b: number;
};

const foo: Foo = {
	a: {
		very: {
			deep: {
				property: 4,
			},
		},
	},
	b: 2,
};

addNestedProperty(foo, 'a.very.deep.property', 2);

export function copyProperties(target: obj, source: obj): obj {
	for (let o = source; o !== Object.prototype; o = Object.getPrototypeOf(o)) {
		for (const name of Object.getOwnPropertyNames(o)) {
			if (name === 'constructor') continue;
			target[name] = o[name];
		}
	}
	return target;
}
